C51 COMPILER V9.01   MAIN                                                                  01/21/2019 23:22:31 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN main.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE main.c BROWSE DEBUG OBJECTEXTEND

line level    source

   1          #include "key.h"
   2          #include "serial.h"
   3          
   4          #define STATE_INPUTTING 0
   5          #define STATE_VALIAD 1
   6          #define STATE_INVALIAD 2
   7          #define STATE_DOOR_OPEN 3
   8          #define STATE_ALERTING 4
   9          
  10          // 轮询开门状态的间隔, 单位(ms)
  11          #define POLL_INTERVAL 10000
  12          
  13          // 门没有关闭的报警
  14          #define ALERT_INTERVAL 5000
  15          
  16          // keycode 和 键盘按键之间的对应
  17          // 27 => A, 28 => B, 29 => C, 30 => D
  18          #define CLOSE_DOOR_KEY_CODE 30 
  19          #define OPEN_DOOR_KEY_CODE 29
  20          #define REINPUT_KEY_CODE 28
  21          #define INPUT_CONFIRM_KEY_CODE 27
  22          
  23          u8 curPos = 0;
  24          u8 first_time = 1;
  25          u8 info_true[8] = {26, 26, 26, 26, 26, 26, 26, 26};
  26          u8 info_false[8] = {15, 15, 15, 15, 15, 15, 15, 15};
  27          u8 state = 0;
  28          u8 password[8];
  29          
  30          // 记录门打开的时间
  31          u8 door_open_time = 0;
  32          
  33          void reset_led(){
  34   1          u8 i;
  35   1          for(i=0;i<8;i++){
  36   2              LED8[i] = DIS_;
  37   2          }
  38   1      }
  39          
  40          void DisplayInfo(u8* info) {
  41   1          u8 i;
  42   1          for(i = 0; i < 8; i++) {
  43   2              LED8[i] = info[i];
  44   2          }
  45   1      }
  46          
  47          void initPassword(){
  48   1          u8 i;
  49   1          curPos = 0;
  50   1          for(i = 0; i < 8; i++) {
  51   2              password[i] = DIS_;
  52   2          }
  53   1          password[8] = 0;
  54   1      }
  55          
C51 COMPILER V9.01   MAIN                                                                  01/21/2019 23:22:31 PAGE 2   

  56          void alert() {
  57   1          // 点亮LED
  58   1          P47 = 0;
  59   1          P46 = 0;
  60   1          // 发送报警信息到服务器
  61   1          PrintString1("aaaaaaaa");
  62   1      }
  63          
  64          void openDoorWithoutAlert() {
  65   1          // 取消报警, 进入正常的看门状态显示
  66   1          P47 = 1;
  67   1          P46 = 0;
  68   1          state = STATE_DOOR_OPEN;
  69   1      }
  70          
  71          void pollState() {
  72   1          if(state == STATE_DOOR_OPEN) {
  73   2              PrintString1("oooooooo");
  74   2          } else {
  75   2              PrintString1("cccccccc");       
  76   2          }
  77   1      }
  78          
  79          void cloesDoor() {
  80   1          // 关门，所有 led 灯关闭
  81   1          P47 = 1;
  82   1          P46 = 1;
  83   1          state = STATE_INPUTTING;
  84   1          initPassword();
  85   1      }
  86          
  87          
  88          void main(void) {
  89   1      
  90   1          u8 remoteKeyCode = 0;
  91   1          serial_init();
  92   1          key_init();
  93   1              initPassword();
  94   1          state = STATE_INPUTTING;
  95   1          // openDoorWithoutAlert();
  96   1          while(1)
  97   1          {
  98   2              // 检测是否收到数据
  99   2              if((TX1_Cnt != RX1_Cnt) && (!B_TX1_Busy))
 100   2              {
 101   3                  // 收到数据，并将数据中的键码赋给变量remoteKeyCode
 102   3                  remoteKeyCode = RX1_Buffer[TX1_Cnt];
 103   3                  if(++TX1_Cnt >= UART1_BUF_LENGTH)   TX1_Cnt = 0;
 104   3              }
 105   2      
 106   2              // 受时间控制的功能
 107   2              if(B_1ms)
 108   2              {
 109   3                  B_1ms = 0;
 110   3      
 111   3                  // 记录当前门锁的状态，发送到服务器
 112   3                  if(msecond >= POLL_INTERVAL) {
 113   4                      msecond = 0;
 114   4                      pollState();
 115   4                  }
 116   3      
 117   3                  if(state == STATE_DOOR_OPEN && msecond % ALERT_INTERVAL == 0) {
C51 COMPILER V9.01   MAIN                                                                  01/21/2019 23:22:31 PAGE 3   

 118   4                      if(door_open_time > 5) {
 119   5                          door_open_time = 0;
 120   5                          alert();
 121   5                      }
 122   4                      door_open_time ++;
 123   4                  }
 124   3      
 125   3                  if(++msecond % 200 == 0)
 126   3                  {
 127   4                      // 根据状态显示特定的数码管
 128   4                      switch(state) {
 129   5                          case STATE_INPUTTING:
 130   5                              DisplayInfo(password);
 131   5                              break;
 132   5                          case STATE_VALIAD:
 133   5                              DisplayInfo(info_true);
 134   5                              break;
 135   5                          case STATE_INVALIAD:
 136   5                              DisplayInfo(info_false);                
 137   5                              break;
 138   5                          default: break;
 139   5                      }
 140   4                  }
 141   3      
 142   3                  
 143   3                  if(++cnt50ms >= 50)
 144   3                  {
 145   4                      cnt50ms = 0;
 146   4                      IO_KeyScan();
 147   4                  }
 148   3      
 149   3                  if(KeyCode != 0)
 150   3                  {
 151   4                      if(state == STATE_INPUTTING && KeyCode >= 17 &&  KeyCode <= 26)              
 152   4                      {
 153   5                          password[curPos++] = KeyCode % 17;
 154   5                      } else if(KeyCode == INPUT_CONFIRM_KEY_CODE) {
 155   5                          if(curPos == 8) {
 156   6                                                      u8 i;
 157   6                                                      u8 tmp[8];
 158   6                                                      for(i = 0; i < 8; i++) {
 159   7                                                              tmp[i] = password[i] + 48;                                                      
 160   7                                                      }
 161   6                              PrintString1(tmp);
 162   6                          }
 163   5                      } else if(state == STATE_INVALIAD && KeyCode == REINPUT_KEY_CODE) {
 164   5                          state = STATE_INPUTTING;
 165   5                          initPassword();
 166   5                      } else if(state == STATE_DOOR_OPEN && KeyCode == CLOSE_DOOR_KEY_CODE) {
 167   5                          // 如果有报警则取消报警
 168   5                          cloesDoor();
 169   5                      } else if(state == STATE_VALIAD && KeyCode == OPEN_DOOR_KEY_CODE) {
 170   5                          // 直接开门
 171   5                          openDoorWithoutAlert();
 172   5                      }
 173   4      
 174   4                      KeyCode = 0;
 175   4                  }
 176   3      
 177   3                  if(remoteKeyCode != 0) {
 178   4      
 179   4                      if(remoteKeyCode == 't') {
C51 COMPILER V9.01   MAIN                                                                  01/21/2019 23:22:31 PAGE 4   

 180   5                          state = STATE_VALIAD;
 181   5                      } else if (remoteKeyCode == 'f') {
 182   5                          state = STATE_INVALIAD;                    
 183   5                      } else if (remoteKeyCode == 'o') {
 184   5                          // 提供远程开门的服务
 185   5                          openDoorWithoutAlert();
 186   5                      }
 187   4      
 188   4                      remoteKeyCode = 0;
 189   4                  }
 190   3              }
 191   2          }
 192   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1493    ----
   CONSTANT SIZE    =     94    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     50      32
   IDATA SIZE       =     32    ----
   BIT SIZE         =      2    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
